{"version":3,"file":"static/js/631.cbba999b.chunk.js","mappings":"6LAAO,IAAMA,EAAW,mCACXC,EACX,2H,4LCCWC,EAAyBC,EAAAA,GAAAA,IAAH,0CAItBC,EAAaD,EAAAA,GAAAA,IAAH,qEAKVE,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,oPAeVI,EAAMJ,EAAAA,GAAAA,IAAH,yGAOHK,EAAiBL,EAAAA,GAAAA,IAAH,kIAQdM,EAAYN,EAAAA,GAAAA,IAAH,0GAOTO,EAAYP,EAAAA,GAAAA,IAAH,0GAOTQ,EAAcR,EAAAA,GAAAA,IAAH,yFAMXS,EAAUT,EAAAA,GAAAA,IAAH,2K,SC4BpB,EAzEqB,WAAO,IAAD,IACjBU,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAQ,qBADGC,EAAAA,EAAAA,MACSC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IACzC,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAA6BT,GAA7B,gGAE2BU,EAAAA,GAAiBV,GAF5C,OAEUW,EAFV,OAGIH,EAASG,GAHb,gDAKIC,QAAQC,IAAI,KAAMC,SALtB,yDADc,yBAAC,SAAD,2BASdC,CAAcf,EACf,GAAE,CAACA,KAMF,SAACX,EAAD,UACGkB,IACC,iCACE,UAAChB,EAAD,YACE,SAACC,EAAD,CAAYwB,GAAId,EAAhB,qBACCK,EAAMU,cACL,SAACvB,EAAD,CACEwB,IACEX,EAAMU,YAAc9B,EAAAA,EAAWoB,EAAMU,YAAc7B,EAAAA,EAErD+B,IAAKZ,EAAMa,YAIjB,UAACzB,EAAD,YACE,UAACC,EAAD,WACGW,EAAMa,MADT,KACkBb,EAAMc,aAAaC,MAAM,EAAG,GAD9C,QAGA,UAACzB,EAAD,0BACe0B,KAAKC,MAA2B,GAArBjB,EAAMkB,cAAqB,OAErD,SAAC5B,EAAD,yBACA,SAACC,EAAD,UAAcS,EAAMmB,YACpB,SAAC7B,EAAD,uBACA,SAACC,EAAD,UACGS,EAAMoB,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,OAAS,eAEvD,SAAClC,EAAD,uCAEA,SAAC,EAAAmC,SAAD,CAAUC,UAAU,SAAClC,EAAD,yBAApB,UACE,SAAC,KAAD,aAOb,C,8IC1EKmC,EAAU,mCAEhBC,EAAAA,GAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAkB,mCAAG,6GAEPD,EAAAA,GAAAA,IAAA,qBAAgC,CACrDE,OAAQ,CACNC,QAASJ,KAJiB,cAExBvB,EAFwB,yBAOvBA,EAAS4B,KAAKC,SAPS,gCAS9B5B,QAAQC,IAAR,MAT8B,yDAAH,qDAalB4B,EAAY,mCAAG,WAAMzC,GAAN,gGAEDmC,EAAAA,GAAAA,IAAA,iBAAoBO,OAAO1C,IAAY,CAC5DqC,OAAQ,CACNC,QAASJ,KAJW,cAElBvB,EAFkB,yBAOjBA,EAAS4B,MAPQ,gCASxB3B,QAAQC,IAAR,MATwB,yDAAH,sDAuCZ8B,EAAgB,mCAAG,WAAMC,GAAN,gGAELT,EAAAA,GAAAA,IAAA,eAA0B,CAC/CE,OAAQ,CACNC,QAASJ,EACTU,MAAAA,KALwB,cAEtBjC,EAFsB,yBAQrBA,EAAS4B,KAAKC,SARO,gCAU5B5B,QAAQC,IAAR,MAV4B,yDAAH,qD","sources":["constants/constants.js","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.js","services/api.js"],"sourcesContent":["export const IMG_PATH = 'https://image.tmdb.org/t/p/w500/';\nexport const DEFAULT_IMG =\n  'https://yt3.ggpht.com/AAKF_677TIvjFz_9xFF0R6PgiVd0kRpEtY6APSxSDRP65nXg8hkn9NFsz2bRd9_Z37DJ9D_b=s900-c-k-c0x00ffffff-no-rj';\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const MoviesDetailsContainer = styled.div`\n  display: flex;\n`;\n\nexport const ImgWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const StyledLink = styled(NavLink)`\n  color: black;\n  font-size: 15px;\n  font-weight: 700;\n  padding-top: 10px;\n  padding-left: 15px;\n  &.active {\n    color: green;\n  }\n  :hover:not(.active),\n  :focus-visible:not(.active) {\n    color: red;\n  }\n`;\n\nexport const Img = styled.img`\n  max-width: 350px;\n  height: 350px;\n  border-radius: 25px;\n  padding: 15px;\n`;\n\nexport const ContentWrapper = styled.div`\n  margin-left: 20px;\n  margin-top: 30px;\n  display: flex;\n  height: 600px;\n  flex-direction: column;\n`;\n\nexport const FilmTitle = styled.div`\n  color: green;\n  font-size: 40px;\n  font-weight: 700;\n  margin-bottom: 30px;\n`;\n\nexport const TextTitle = styled.div`\n  color: green;\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nexport const TextContent = styled.div`\n  font-size: 15px;\n  font-weight: 500;\n  margin-bottom: 30px;\n`;\n\nexport const Message = styled.div`\n  text-align: center;\n  color: green;\n  font-size: 50px;\n  font-weight: 700;\n  margin: 30px 30px;\n  display: flex;\n  align-items: baseline;\n`;\n// export const Message\n","import { useParams, useLocation, Outlet } from 'react-router-dom';\nimport * as API from 'services/api';\nimport { DEFAULT_IMG, IMG_PATH } from 'constants/constants';\nimport { useState, useEffect, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  MoviesDetailsContainer,\n  ImgWrapper,\n  StyledLink,\n  Img,\n  ContentWrapper,\n  FilmTitle,\n  TextTitle,\n  TextContent,\n  Message,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/';\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    async function loadMovieById(movieId) {\n      try {\n        const response = await API.getMovieById(movieId);\n        setMovie(response);\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    loadMovieById(movieId);\n  }, [movieId]);\n\n  // const { poster_path, title, release_date, vote_average, overview, genres } =\n  //   movie;\n\n  return (\n    <MoviesDetailsContainer>\n      {movie && (\n        <>\n          <ImgWrapper>\n            <StyledLink to={backLink}>Go Back</StyledLink>\n            {movie.poster_path && (\n              <Img\n                src={\n                  movie.poster_path ? IMG_PATH + movie.poster_path : DEFAULT_IMG\n                }\n                alt={movie.title}\n              />\n            )}\n          </ImgWrapper>\n          <ContentWrapper>\n            <FilmTitle>\n              {movie.title} ({movie.release_date.slice(0, 4)})\n            </FilmTitle>\n            <TextTitle>\n              User votes: {Math.round(movie.vote_average * 10) / 10}\n            </TextTitle>\n            <TextTitle>Overview:</TextTitle>\n            <TextContent>{movie.overview}</TextContent>\n            <TextTitle>Genres:</TextTitle>\n            <TextContent>\n              {movie.genres.map(genre => genre.name).join(', ') || 'no genres'}\n            </TextContent>\n            <TextTitle>Additional information:</TextTitle>\n\n            <Suspense fallback={<Message>Loading...</Message>}>\n              <Outlet />\n            </Suspense>\n          </ContentWrapper>\n        </>\n      )}\n    </MoviesDetailsContainer>\n  );\n};\n\nMovieDetails.propTypes = {\n  movie: PropTypes.arrayOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n      overview: PropTypes.string.isRequired,\n      genres: PropTypes.array.isRequired,\n    })\n  ),\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = 'fd6bb4af85e210e712557c20fca0d5b7';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingToday = async () => {\n  try {\n    const response = await axios.get(`trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${Number(movieId)}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCast = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getReviews = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/review`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieBySearch = async query => {\n  try {\n    const response = await axios.get(`search/movie`, {\n      params: {\n        api_key: API_KEY,\n        query,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["IMG_PATH","DEFAULT_IMG","MoviesDetailsContainer","styled","ImgWrapper","StyledLink","NavLink","Img","ContentWrapper","FilmTitle","TextTitle","TextContent","Message","movieId","useParams","backLink","useLocation","state","from","useState","movie","setMovie","useEffect","API","response","console","log","message","loadMovieById","to","poster_path","src","alt","title","release_date","slice","Math","round","vote_average","overview","genres","map","genre","name","join","Suspense","fallback","API_KEY","axios","fetchTrendingToday","params","api_key","data","results","getMovieById","Number","getMovieBySearch","query"],"sourceRoot":""}