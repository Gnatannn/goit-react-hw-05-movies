{"version":3,"file":"static/js/321.47219c4a.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.js","constants/constants.js","pages/Movies/Movies.styled.js","pages/Movies/Movies.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const Item = styled.li`\n  width: 200px;\n  /* height: 350px; */\n  /* border: 2px solid grey; */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 5px;\n  border-radius: 5px;\n  :hover:not(.active),\n  :focus-visible:not(.active) {\n    border: 1px solid green;\n  }\n`;\n\nexport const LinkMovie = styled(NavLink)`\n  color: grey;\n  font-size: 15px;\n  font-weight: 700;\n  text-decoration: none;\n  &.active {\n    color: green;\n  }\n  :hover:not(.active),\n  :focus-visible:not(.active) {\n    color: green;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 300px;\n`;\n\nexport const ImgTitle = styled.p`\n  padding: 10px;\n  height: 38px;\n`;\n","import {\n  LinkMovie,\n  List,\n  Item,\n  Img,\n  ImgTitle,\n} from 'components/MovieList/MovieList.styled';\nimport { DEFAULT_IMG, IMG_PATH } from 'constants/constants';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(({ title, id, poster_path }) => {\n        return (\n          <Item key={id}>\n            <LinkMovie to={`movies/${id}`} state={{ from: location }}>\n              <Img\n                src={poster_path ? IMG_PATH + poster_path : DEFAULT_IMG}\n                alt={title}\n                loading=\"lazy\"\n              />\n              <ImgTitle>{title.toUpperCase()}</ImgTitle>\n            </LinkMovie>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n","export const IMG_PATH = 'https://image.tmdb.org/t/p/w500/';\nexport const DEFAULT_IMG =\n  'https://yt3.ggpht.com/AAKF_677TIvjFz_9xFF0R6PgiVd0kRpEtY6APSxSDRP65nXg8hkn9NFsz2bRd9_Z37DJ9D_b=s900-c-k-c0x00ffffff-no-rj';\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesHeader = styled.h1`\n  margin: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const MoviesContainer = styled.main`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const FormEl = styled(Form)`\n  display: flex;\n  gap: 30px;\n  margin-bottom: 30px;\n`;\n\nexport const FieldEl = styled(Field)`\n  width: 300px;\n  height: 50px;\n  border-radius: 15px;\n  border: solid green 1px;\n  color: green;\n  background-color: white;\n  padding-left: 15px;\n  font-weight: 500;\n  font-size: 20px;\n`;\n\nexport const MoviesSearchButton = styled.button`\n  display: inline-block;\n  width: 100px;\n  height: 52px;\n  color: green;\n  background-color: white;\n  border: solid green 1px;\n  /* opacity: 0.6; */\n  cursor: pointer;\n  font-size: 20px;\n  border-radius: 15px;\n  :hover {\n    color: white;\n    background-color: green;\n    opacity: 0.5;\n  }\n`;\n\nexport const InfoMessage = styled.p`\n  margin: 30px;\n  font-size: 35px;\n  font-weight: 700;\n  color: red;\n`;\n\nexport const BackLink = styled(Link)`\n  font-weight: 500;\n  color: green;\n  margin-bottom: 30px;\n`;\n","import { Formik } from 'formik';\nimport * as API from 'services/api';\nimport {\n  MoviesHeader,\n  MoviesContainer,\n  FormEl,\n  FieldEl,\n  MoviesSearchButton,\n  InfoMessage,\n  BackLink,\n} from 'pages/Movies/Movies.styled';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport MovieList from 'components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [findedFilms, setFindedFilms] = useState([]);\n  const [isFilmsLoaded, setIsFilmsLoaded] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (query) {\n      getFindedFilms(query);\n    }\n  }, [searchParams]);\n\n  async function getFindedFilms(films) {\n    if (films === '') {\n      return;\n    }\n    try {\n      const response = await API.getMovieBySearch(films);\n      setFindedFilms(response);\n      setIsFilmsLoaded(true);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handleSubmit = (values, actions) => {\n    actions.setSubmitting(false);\n\n    if (values.searchInput === '') {\n      return;\n    }\n\n    setSearchParams({ query: values.searchInput });\n    getFindedFilms(values.searchInput);\n  };\n\n  return (\n    <MoviesContainer>\n      <MoviesHeader>Movies</MoviesHeader>\n      <Formik\n        initialValues={{ searchInput: searchParams.get('query') || '' }}\n        onSubmit={handleSubmit}\n      >\n        {({ isSubmitting }) => (\n          <FormEl>\n            <FieldEl\n              name=\"searchInput\"\n              type=\"text\"\n              autoComplete=\"off\"\n              autoFocus\n              placeholder=\"Film name\"\n            />\n            <MoviesSearchButton type=\"submit\" disabled={isSubmitting}>\n              Search\n            </MoviesSearchButton>\n          </FormEl>\n        )}\n      </Formik>\n      {findedFilms.length === 0 &&\n        searchParams.get('query') &&\n        isFilmsLoaded && (\n          <InfoMessage>We can't find this film, try again.</InfoMessage>\n        )}\n      <MovieList movies={findedFilms} />\n      <BackLink to=\"/\">Go home</BackLink>\n    </MoviesContainer>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'fd6bb4af85e210e712557c20fca0d5b7';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingToday = async () => {\n  try {\n    const response = await axios.get(`trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${Number(movieId)}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCast = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getReviews = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/review`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieBySearch = async query => {\n  try {\n    const response = await axios.get(`search/movie`, {\n      params: {\n        api_key: API_KEY,\n        query,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["List","styled","Item","LinkMovie","NavLink","Img","ImgTitle","MovieList","movies","location","useLocation","map","title","id","poster_path","to","state","from","src","alt","loading","toUpperCase","MoviesHeader","MoviesContainer","FormEl","Form","FieldEl","Field","MoviesSearchButton","InfoMessage","BackLink","Link","useState","findedFilms","setFindedFilms","isFilmsLoaded","setIsFilmsLoaded","useSearchParams","searchParams","setSearchParams","getFindedFilms","films","API","response","console","log","useEffect","query","get","initialValues","searchInput","onSubmit","values","actions","setSubmitting","isSubmitting","name","type","autoComplete","autoFocus","placeholder","disabled","length","API_KEY","axios","fetchTrendingToday","params","api_key","data","results","getMovieBySearch"],"sourceRoot":""}