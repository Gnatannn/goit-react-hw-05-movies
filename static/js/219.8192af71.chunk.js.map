{"version":3,"file":"static/js/219.8192af71.chunk.js","mappings":"6RAEaA,EAAUC,EAAAA,GAAAA,IAAH,kFAMPC,EAAOD,EAAAA,GAAAA,GAAH,oGAOJE,EAAWF,EAAAA,GAAAA,GAAH,qNAWRG,EAAcH,EAAAA,GAAAA,IAAH,8HAQXI,EAAcJ,EAAAA,GAAAA,IAAH,iGAMXK,EAAWL,EAAAA,GAAAA,IAAH,kF,SCmBrB,EA3Ca,WACX,OAAwBM,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAwCF,EAAAA,EAAAA,WAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAAwBF,GAAxB,gGAE2BG,EAAAA,GAAYH,GAFvC,OAEUI,EAFV,OAGIP,EAAQO,GACRL,GAAgB,GAJpB,gDAMIM,QAAQC,IAAI,KAAMC,SANtB,yDADc,yBAAC,SAAD,2BAUdC,CAASR,EACV,GAAE,CAACA,IAEgB,IAAhBJ,EAAKa,QAAgBX,GAChB,SAACN,EAAD,mDAIP,SAACF,EAAD,UACGM,EAAKc,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACnC,OACE,UAACvB,EAAD,YACE,SAACH,EAAD,CACE2B,IAAKF,EAAeG,EAAAA,EAAWH,EA9B5B,0DA+BHI,IAAKL,EACLM,QAAQ,UAEV,UAACzB,EAAD,YACE,SAACC,EAAD,UAAWkB,KACX,UAAClB,EAAD,yBAAsBoB,UARXH,EAYlB,KAGN,C,6ECzDM,IAAMK,EAAW,mCACXG,EACX,2H,8LCAIC,EAAU,mCAEhBC,EAAAA,GAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAkB,mCAAG,6GAEPD,EAAAA,GAAAA,IAAA,qBAAgC,CACrDE,OAAQ,CACNC,QAASJ,KAJiB,cAExBhB,EAFwB,yBAOvBA,EAASqB,KAAKC,SAPS,gCAS9BrB,QAAQC,IAAR,MAT8B,yDAAH,qDAalBqB,EAAY,mCAAG,WAAM3B,GAAN,gGAEDqB,EAAAA,GAAAA,IAAA,iBAAoBO,OAAO5B,IAAY,CAC5DuB,OAAQ,CACNC,QAASJ,KAJW,cAElBhB,EAFkB,yBAOjBA,EAASqB,MAPQ,gCASxBpB,QAAQC,IAAR,MATwB,yDAAH,sDAaZuB,EAAO,mCAAG,WAAMlB,GAAN,gGAEIU,EAAAA,GAAAA,IAAA,gBAAmBV,EAAnB,YAAiC,CACtDY,OAAQ,CACNC,QAASJ,KAJM,cAEbhB,EAFa,yBAOZA,EAASqB,KAAK7B,MAPF,gCASnBS,QAAQC,IAAR,MATmB,yDAAH,sDAaPwB,EAAU,mCAAG,WAAMnB,GAAN,gGAECU,EAAAA,GAAAA,IAAA,gBAAmBV,EAAnB,YAAiC,CACtDY,OAAQ,CACNC,QAASJ,KAJS,cAEhBhB,EAFgB,yBAOfA,EAASqB,KAAKC,SAPC,gCAStBrB,QAAQC,IAAR,MATsB,yDAAH,sDAaVyB,EAAgB,mCAAG,WAAMC,GAAN,gGAELX,EAAAA,GAAAA,IAAA,eAA0B,CAC/CE,OAAQ,CACNC,QAASJ,EACTY,MAAAA,KALwB,cAEtB5B,EAFsB,yBAQrBA,EAASqB,KAAKC,SARO,gCAU5BrB,QAAQC,IAAR,MAV4B,yDAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","constants/constants.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ItemImg = styled.img`\n  width: 100%;\n  height: 200px;\n  border-radius: 10px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-bottom: 30px;\n`;\n\nexport const ListItem = styled.li`\n  width: 130px;\n  border: 1px solid green;\n  padding: 10px;\n  border-radius: 10px;\n  list-style: none;\n  /* display: list-item;\n  justify-content: center;\n  align-items: center; */\n`;\n\nexport const CastMessage = styled.div`\n  font-weight: 700;\n  font-size: 15px;\n  color: red;\n  margin-bottom: 10px;\n  margin-left: 10px;\n`;\n\nexport const ItemWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport const ItemInfo = styled.div`\n  font-size: 15px;\n  font-weight: 500;\n  padding: 5px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { IMG_PATH } from 'constants/constants';\nimport * as API from 'services/api';\nimport {\n  CastMessage,\n  List,\n  ListItem,\n  ItemImg,\n  ItemWrapper,\n  ItemInfo,\n} from './Cast.styled';\nimport PropTypes from 'prop-types';\n\nconst NO_IMAGE = 'https://cdn-icons-png.flaticon.com/512/2922/2922506.png';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isCastLoaded, setIsCastLoaded] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function loadCast(movieId) {\n      try {\n        const response = await API.getCast(movieId);\n        setCast(response);\n        setIsCastLoaded(true);\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    loadCast(movieId);\n  }, [movieId]);\n\n  if (cast.length === 0 && isCastLoaded) {\n    return <CastMessage> There is no information about cast</CastMessage>;\n  }\n\n  return (\n    <List>\n      {cast.map(({ id, name, profile_path, character }) => {\n        return (\n          <ListItem key={id}>\n            <ItemImg\n              src={profile_path ? IMG_PATH + profile_path : NO_IMAGE}\n              alt={name}\n              loading=\"lazy\"\n            />\n            <ItemWrapper>\n              <ItemInfo>{name}</ItemInfo>\n              <ItemInfo>Character: {character}</ItemInfo>\n            </ItemWrapper>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n","export const IMG_PATH = 'https://image.tmdb.org/t/p/w500/';\nexport const DEFAULT_IMG =\n  'https://yt3.ggpht.com/AAKF_677TIvjFz_9xFF0R6PgiVd0kRpEtY6APSxSDRP65nXg8hkn9NFsz2bRd9_Z37DJ9D_b=s900-c-k-c0x00ffffff-no-rj';\n","import axios from 'axios';\n\nconst API_KEY = 'fd6bb4af85e210e712557c20fca0d5b7';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingToday = async () => {\n  try {\n    const response = await axios.get(`trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${Number(movieId)}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCast = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getReviews = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieBySearch = async query => {\n  try {\n    const response = await axios.get(`search/movie`, {\n      params: {\n        api_key: API_KEY,\n        query,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["ItemImg","styled","List","ListItem","CastMessage","ItemWrapper","ItemInfo","useState","cast","setCast","isCastLoaded","setIsCastLoaded","movieId","useParams","useEffect","API","response","console","log","message","loadCast","length","map","id","name","profile_path","character","src","IMG_PATH","alt","loading","DEFAULT_IMG","API_KEY","axios","fetchTrendingToday","params","api_key","data","results","getMovieById","Number","getCast","getReviews","getMovieBySearch","query"],"sourceRoot":""}